<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace GeckoLibs\DTOGeneratorBundle\Generator;

use Symfony\Component\HttpKernel\Bundle\BundleInterface;
use CG\Core\DefaultGeneratorStrategy;
use CG\Generator\PhpClass;
use CG\Generator\PhpProperty;
use CG\Generator\PhpMethod;
use CG\Generator\PhpParameter;
use CG\Generator\Writer;

/**
 * Description of DTOGenerator
 *
 * @author 255196
 */
class DTOGenerator extends Generator
{

    private $strategy;

    public function __construct()
    {
        $this->strategy = new DefaultGeneratorStrategy();
    }

    public function generate(BundleInterface $bundle, $dto, $root, array $properties, $withTest, $withAssembler)
    {
        $class = new PhpClass();
        $class->setName($this->createClassName($bundle, $dto, $root))
                ->setAbstract(false)
                ->setDocblock("/**
 * Generated by GeckoLibs DTO generator 
 */\n");

        $class->setMethod($this->generateContructor($properties));

        foreach ($properties as $name => $type) {
            $writer = new Writer();

            $class->setProperty(PhpProperty::create($name)
                            ->setDefaultValue(null)
                            ->setVisibility('public')
                            ->setDocblock(sprintf("/**\n * @var %s \$%s\n*/\n\n",
                                            $type, $name)));

            $class->setMethod(PhpMethod::create(sprintf("get%s", ucfirst($name)))
                            ->setBody($writer->writeln('return $this->' . $name . ';')
                                    ->getContent()));
        }

        $this->saveFileContent($this->createFileName($bundle, $dto, $root),
                $this->strategy->generate($class));

        if ($withAssembler) {
            $this->generateAssemblerClass($bundle, $dto, $root);
        }
    }

    private function createClassName(BundleInterface $bundle, $dto, $root)
    {
        return $bundle->getNamespace() . '\\' . $root . '\\' . $dto;
    }

    private function createAssemblerClassName(BundleInterface $bundle, $dto, $root)
    {
        return $bundle->getNamespace() . '\\' . $root . '\\' . $dto . 'Assembler';
    }

    private function createFileName(BundleInterface $bundle, $dto, $root)
    {
        return join(DIRECTORY_SEPARATOR,
                array($bundle->getPath(),
            $root,
            str_replace('\\', DIRECTORY_SEPARATOR, $dto) . '.php'));
    }

    private function generateAssemblerClass(BundleInterface $bundle, $dto, $root)
    {
        $assemblerName = $this->createAssemblerClassName($bundle, $dto, $root);
        $class = PhpClass::create($assemblerName)
                ->setAbstract(false)
                ->setDocblock("/**
 * Generated by GeckoLibs DTO generator 
 */\n");

        $class->setMethod(PhpMethod::create('createDTO')
                        ->setVisibility('public')
                        ->setDocblock("/** \n * @param \$object mixed\n" .
                                " * @return \\" . $this->createClassName($bundle,
                                        $dto, $root) . " \n */")
                        ->addParameter(PhpParameter::create('object'))
        );

        $this->saveFileContent($this->createFileName($bundle, $dto . 'Assembler',
                        $root), $this->strategy->generate($class));
    }

    private function generateContructor(array $properties)
    {
        $method = PhpMethod::create('__construct');
        $writer = new Writer();
        $docblock = "/**\n";

        foreach ($properties as $name => $type) {
            $method->addParameter(PhpParameter::create($name));
            $docblock .= " * @param " . $type . "\n";
            $writer->writeln('$this->' . $name . ' = $' . $name . ';');
        }

        $docblock .= " */\n";
        $method->setBody($writer->getContent())
                ->setDocblock($docblock);

        return $method;
    }

}
